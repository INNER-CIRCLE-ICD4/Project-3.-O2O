version: '3.8'

services:
  # PostgreSQL - 강남 샤드 시뮬레이션
  postgres-test:
    image: postgres:15-alpine
    container_name: matching-postgres-test
    environment:
      POSTGRES_DB: ddakta_matching_test
      POSTGRES_USER: ddakta_test
      POSTGRES_PASSWORD: ddakta_test123
    ports:
      - "5433:5432"
    volumes:
      - ./test-infrastructure/init-scripts:/docker-entrypoint-initdb.d
      - postgres-test-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ddakta_test -d ddakta_matching_test"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - matching-test-network

  # Redis - 캐싱 및 분산 락
  redis-test:
    image: redis:7-alpine
    container_name: matching-redis-test
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6380:6379"
    volumes:
      - redis-test-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - matching-test-network

  # Zookeeper for Kafka
  zookeeper-test:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: matching-zookeeper-test
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2182:2181"
    volumes:
      - zookeeper-test-data:/var/lib/zookeeper/data
      - zookeeper-test-logs:/var/lib/zookeeper/log
    networks:
      - matching-test-network

  # Kafka
  kafka-test:
    image: confluentinc/cp-kafka:7.5.0
    container_name: matching-kafka-test
    depends_on:
      - zookeeper-test
    ports:
      - "9093:9093"
      - "29093:29093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-test:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29093,EXTERNAL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-test:29093,EXTERNAL://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka-test-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:29093", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - matching-test-network

  # MockServer - 외부 서비스 시뮬레이션
  mockserver:
    image: mockserver/mockserver:5.15.0
    container_name: matching-mockserver
    ports:
      - "1080:1080"
    environment:
      MOCKSERVER_PROPERTY_FILE: /config/mockserver.properties
      MOCKSERVER_INITIALIZATION_JSON_PATH: /config/mock-expectations.json
    volumes:
      - ./test-infrastructure/mock-responses:/config
      - ./test-infrastructure/mock-expectations:/expectations
    command: -serverPort 1080 -logLevel INFO
    networks:
      - matching-test-network

  # WireMock - 대체 Mock 서버
  wiremock:
    image: wiremock/wiremock:3.3.1
    container_name: matching-wiremock
    ports:
      - "8090:8080"
    volumes:
      - ./test-infrastructure/wiremock:/home/wiremock
    command: --verbose --global-response-templating --disable-gzip --print-all-network-traffic
    networks:
      - matching-test-network

  # Prometheus - 메트릭 수집
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: matching-prometheus-test
    ports:
      - "9091:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./test-infrastructure/prometheus:/etc/prometheus
      - prometheus-test-data:/prometheus
    networks:
      - matching-test-network

  # Grafana - 메트릭 시각화
  grafana:
    image: grafana/grafana:10.2.0
    container_name: matching-grafana-test
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - ./test-infrastructure/grafana/provisioning:/etc/grafana/provisioning
      - ./test-infrastructure/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-test-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - matching-test-network

  # K6 - 부하 테스트 도구
  k6:
    image: grafana/k6:0.48.0
    container_name: matching-k6-test
    volumes:
      - ./test-infrastructure/k6-scripts:/scripts
    environment:
      K6_PROMETHEUS_RW_SERVER_URL: http://prometheus:9090/api/v1/write
      K6_PROMETHEUS_RW_TREND_AS_NATIVE_HISTOGRAM: "true"
    networks:
      - matching-test-network
    profiles:
      - load-test

  # Matching Service - 테스트 대상
  matching-service-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: matching-service-test-1
    environment:
      SPRING_PROFILES_ACTIVE: test
      DB_HOST: postgres-test
      DB_PORT: 5432
      DB_NAME: ddakta_matching_test
      DB_USERNAME: ddakta_test
      DB_PASSWORD: ddakta_test123
      REDIS_HOST: redis-test
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka-test:29093
      LOCATION_SERVICE_URL: http://mockserver:1080
      USER_SERVICE_URL: http://mockserver:1080
      PAYMENT_SERVICE_URL: http://mockserver:1080
      SERVER_PORT: 8082
      HOSTNAME: matching-instance-1
    ports:
      - "8082:8082"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
      mockserver:
        condition: service_started
    networks:
      - matching-test-network
    profiles:
      - integration

  # Matching Service - 인스턴스 2 (분산 환경 테스트용)
  matching-service-2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: matching-service-test-2
    environment:
      SPRING_PROFILES_ACTIVE: test
      DB_HOST: postgres-test
      DB_PORT: 5432
      DB_NAME: ddakta_matching_test
      DB_USERNAME: ddakta_test
      DB_PASSWORD: ddakta_test123
      REDIS_HOST: redis-test
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka-test:29093
      LOCATION_SERVICE_URL: http://mockserver:1080
      USER_SERVICE_URL: http://mockserver:1080
      PAYMENT_SERVICE_URL: http://mockserver:1080
      SERVER_PORT: 8083
      HOSTNAME: matching-instance-2
    ports:
      - "8083:8083"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
      mockserver:
        condition: service_started
    networks:
      - matching-test-network
    profiles:
      - distributed

  # 로드 밸런서 (분산 환경 테스트용)
  nginx:
    image: nginx:alpine
    container_name: matching-nginx-test
    ports:
      - "8080:80"
    volumes:
      - ./test-infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - matching-service-1
      - matching-service-2
    networks:
      - matching-test-network
    profiles:
      - distributed

networks:
  matching-test-network:
    driver: bridge

volumes:
  postgres-test-data:
  redis-test-data:
  zookeeper-test-data:
  zookeeper-test-logs:
  kafka-test-data:
  prometheus-test-data:
  grafana-test-data: